// <auto-generated />
using System;
using Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250524154413_EnumsToTables")]
    partial class EnumsToTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Api.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("Api.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("integer")
                        .HasColumnName("phone_number");

                    b.Property<short>("ZipCode")
                        .HasColumnType("smallint")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_customers");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("Api.Models.Delivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<int>("DeliveryOptionId")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_option_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("TrackingId")
                        .HasColumnType("integer")
                        .HasColumnName("tracking_id");

                    b.Property<short>("ZipCode")
                        .HasColumnType("smallint")
                        .HasColumnName("zip_code");

                    b.HasKey("Id")
                        .HasName("pk_deliveries");

                    b.HasIndex("DeliveryOptionId")
                        .HasDatabaseName("ix_deliveries_delivery_option_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_deliveries_order_id");

                    b.ToTable("deliveries", (string)null);
                });

            modelBuilder.Entity("Api.Models.DeliveryCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_delivery_companies");

                    b.ToTable("delivery_companies", (string)null);
                });

            modelBuilder.Entity("Api.Models.DeliveryOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeliveryCompanyId")
                        .HasColumnType("integer")
                        .HasColumnName("delivery_company_id");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.HasKey("Id")
                        .HasName("pk_delivery_options");

                    b.HasIndex("DeliveryCompanyId")
                        .HasDatabaseName("ix_delivery_options_delivery_company_id");

                    b.ToTable("delivery_options", (string)null);
                });

            modelBuilder.Entity("Api.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("address");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("end_time");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("start_time");

                    b.HasKey("Id")
                        .HasName("pk_events");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_events_product_id");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Api.Models.Glass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_glasses");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_glasses_product_id");

                    b.ToTable("glasses", (string)null);
                });

            modelBuilder.Entity("Api.Models.GlassToWineTypeMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GlassId")
                        .HasColumnType("integer")
                        .HasColumnName("glass_id");

                    b.Property<int>("WineTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("wine_type_id");

                    b.HasKey("Id")
                        .HasName("pk_glasses_to_wine_types_map");

                    b.HasIndex("GlassId")
                        .HasDatabaseName("ix_glasses_to_wine_types_map_glass_id");

                    b.HasIndex("WineTypeId")
                        .HasDatabaseName("ix_glasses_to_wine_types_map_wine_type_id");

                    b.ToTable("glasses_to_wine_types_map", (string)null);
                });

            modelBuilder.Entity("Api.Models.Liqour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AlcoholPercent")
                        .HasColumnType("numeric(3,1)")
                        .HasColumnName("alcohol_percent");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int>("LiqourCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("liqour_category_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<short?>("YearsAged")
                        .HasColumnType("smallint")
                        .HasColumnName("years_aged");

                    b.Property<short?>("YearsBottled")
                        .HasColumnType("smallint")
                        .HasColumnName("years_bottled");

                    b.HasKey("Id")
                        .HasName("pk_liqours");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_liqours_country_id");

                    b.HasIndex("LiqourCategoryId")
                        .HasDatabaseName("ix_liqours_liqour_category_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_liqours_product_id");

                    b.ToTable("liqours", (string)null);
                });

            modelBuilder.Entity("Api.Models.LiqourCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_liqour_categories");

                    b.ToTable("liqour_categories", (string)null);
                });

            modelBuilder.Entity("Api.Models.Manufacturer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_manufacturers");

                    b.ToTable("manufacturers", (string)null);
                });

            modelBuilder.Entity("Api.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer")
                        .HasColumnName("customer_id");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("order_placed");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("order_status_id");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ix_orders_customer_id");

                    b.HasIndex("OrderStatusId")
                        .HasDatabaseName("ix_orders_order_status_id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("Api.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_order_statuses");

                    b.ToTable("order_statuses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Placed"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Confirmed"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sent"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Delivered"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Cancelled"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Ready"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Done"
                        });
                });

            modelBuilder.Entity("Api.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("integer")
                        .HasColumnName("manufacturer_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("price");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer")
                        .HasColumnName("unit_id");

                    b.HasKey("Id")
                        .HasName("pk_products");

                    b.HasIndex("ManufacturerId")
                        .HasDatabaseName("ix_products_manufacturer_id");

                    b.HasIndex("UnitId")
                        .HasDatabaseName("ix_products_unit_id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("Api.Models.ProductToOrderMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.HasKey("Id")
                        .HasName("pk_products_to_orders_map");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_products_to_orders_map_order_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_products_to_orders_map_product_id");

                    b.ToTable("products_to_orders_map", (string)null);
                });

            modelBuilder.Entity("Api.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_regions");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_regions_country_id");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("Api.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("quantity");

                    b.Property<int>("SpecialtyTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("specialty_type_id");

                    b.HasKey("Id")
                        .HasName("pk_specialties");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_specialties_product_id");

                    b.HasIndex("SpecialtyTypeId")
                        .HasDatabaseName("ix_specialties_specialty_type_id");

                    b.ToTable("specialties", (string)null);
                });

            modelBuilder.Entity("Api.Models.SpecialtyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_specialty_types");

                    b.ToTable("specialty_types", (string)null);
                });

            modelBuilder.Entity("Api.Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_units");

                    b.ToTable("units", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ml"
                        },
                        new
                        {
                            Id = 2,
                            Name = "cl"
                        },
                        new
                        {
                            Id = 3,
                            Name = "dl"
                        },
                        new
                        {
                            Id = 4,
                            Name = "l"
                        },
                        new
                        {
                            Id = 5,
                            Name = "gr"
                        },
                        new
                        {
                            Id = 6,
                            Name = "kg"
                        },
                        new
                        {
                            Id = 7,
                            Name = "stk"
                        });
                });

            modelBuilder.Entity("Api.Models.Wine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<int>("WineTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("wine_type_id");

                    b.Property<short>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("year");

                    b.HasKey("Id")
                        .HasName("pk_wines");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_wines_country_id");

                    b.HasIndex("ProductId")
                        .HasDatabaseName("ix_wines_product_id");

                    b.HasIndex("WineTypeId")
                        .HasDatabaseName("ix_wines_wine_type_id");

                    b.ToTable("wines", (string)null);
                });

            modelBuilder.Entity("Api.Models.WineCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_wine_categories");

                    b.ToTable("wine_categories", (string)null);
                });

            modelBuilder.Entity("Api.Models.WineType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("WineCategoryId")
                        .HasColumnType("integer")
                        .HasColumnName("wine_category_id");

                    b.HasKey("Id")
                        .HasName("pk_wine_types");

                    b.HasIndex("WineCategoryId")
                        .HasDatabaseName("ix_wine_types_wine_category_id");

                    b.ToTable("wine_types", (string)null);
                });

            modelBuilder.Entity("Api.Models.Delivery", b =>
                {
                    b.HasOne("Api.Models.DeliveryOption", "DeliveryOption")
                        .WithMany()
                        .HasForeignKey("DeliveryOptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deliveries_delivery_options_delivery_option_id");

                    b.HasOne("Api.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deliveries_orders_order_id");

                    b.Navigation("DeliveryOption");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Api.Models.DeliveryOption", b =>
                {
                    b.HasOne("Api.Models.DeliveryCompany", "DeliveryCompany")
                        .WithMany()
                        .HasForeignKey("DeliveryCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_delivery_options_delivery_companies_delivery_company_id");

                    b.Navigation("DeliveryCompany");
                });

            modelBuilder.Entity("Api.Models.Event", b =>
                {
                    b.HasOne("Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Api.Models.Glass", b =>
                {
                    b.HasOne("Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_glasses_products_product_id");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Api.Models.GlassToWineTypeMap", b =>
                {
                    b.HasOne("Api.Models.Glass", "Glass")
                        .WithMany()
                        .HasForeignKey("GlassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_glasses_to_wine_types_map_glasses_glass_id");

                    b.HasOne("Api.Models.WineType", "WineType")
                        .WithMany()
                        .HasForeignKey("WineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_glasses_to_wine_types_map_wine_types_wine_type_id");

                    b.Navigation("Glass");

                    b.Navigation("WineType");
                });

            modelBuilder.Entity("Api.Models.Liqour", b =>
                {
                    b.HasOne("Api.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_liqours_countries_country_id");

                    b.HasOne("Api.Models.LiqourCategory", "LiqourCategory")
                        .WithMany()
                        .HasForeignKey("LiqourCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_liqours_liqour_categories_liqour_category_id");

                    b.HasOne("Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_liqours_products_product_id");

                    b.Navigation("Country");

                    b.Navigation("LiqourCategory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Api.Models.Order", b =>
                {
                    b.HasOne("Api.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_customers_customer_id");

                    b.HasOne("Api.Models.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_orders_order_statuses_order_status_id");

                    b.Navigation("Customer");

                    b.Navigation("OrderStatus");
                });

            modelBuilder.Entity("Api.Models.Product", b =>
                {
                    b.HasOne("Api.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_manufacturers_manufacturer_id");

                    b.HasOne("Api.Models.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_units_unit_id");

                    b.Navigation("Manufacturer");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("Api.Models.ProductToOrderMap", b =>
                {
                    b.HasOne("Api.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_to_orders_map_orders_order_id");

                    b.HasOne("Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_products_to_orders_map_products_product_id");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Api.Models.Region", b =>
                {
                    b.HasOne("Api.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_regions_countries_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Api.Models.Specialty", b =>
                {
                    b.HasOne("Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specialties_products_product_id");

                    b.HasOne("Api.Models.SpecialtyType", "SpecialtyType")
                        .WithMany()
                        .HasForeignKey("SpecialtyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_specialties_specialty_types_specialty_type_id");

                    b.Navigation("Product");

                    b.Navigation("SpecialtyType");
                });

            modelBuilder.Entity("Api.Models.Wine", b =>
                {
                    b.HasOne("Api.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wines_countries_country_id");

                    b.HasOne("Api.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wines_products_product_id");

                    b.HasOne("Api.Models.WineType", "WineType")
                        .WithMany()
                        .HasForeignKey("WineTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wines_wine_types_wine_type_id");

                    b.Navigation("Country");

                    b.Navigation("Product");

                    b.Navigation("WineType");
                });

            modelBuilder.Entity("Api.Models.WineType", b =>
                {
                    b.HasOne("Api.Models.WineCategory", "WineCategory")
                        .WithMany()
                        .HasForeignKey("WineCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_wine_types_wine_categories_wine_category_id");

                    b.Navigation("WineCategory");
                });
#pragma warning restore 612, 618
        }
    }
}
